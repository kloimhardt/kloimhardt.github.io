{
"version":3,
"file":"module$node_modules$blockly$core_browser.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,yCAAA,CAA6D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAEnG,SAAQ,CAACC,IAAD,CAAOC,OAAP,CAAgB,CACF,UAAtB,GAAI,MAAOC,OAAX,EAAoCA,MAAAC,IAApC,CACED,MAAA,CAAO,CAAC,WAAD,CAAP,CAAsBD,OAAtB,CADF,CAE8B,QAAvB,GAAI,MAAOF,QAAX,CACLD,MAAAC,QADK,CACYE,OAAA,CAAQJ,OAAA,CAAQ,qCAAR,CAAR,CADZ,CAGLG,IAAAI,QAHK,CAGUH,OAAA,CAAQD,IAAAI,QAAR,CANO,CAAxB,CAAA,CAQA,IARA,CAQM,QAAQ,CAACA,OAAD,CAAU,CA2B1BA,OAAAC,UAAA,CAAoBC,QAAS,CAACC,MAAD,CAAS,CACpCH,OAAAI,IAAA,CAAcJ,OAAAI,IAAd,EAA6B,EAC7BC,OAAAC,KAAA,CAAYH,MAAZ,CAAAI,QAAA,CAA4B,QAAS,CAACC,CAAD,CAAI,CACvCR,OAAAI,IAAA,CAAYI,CAAZ,CAAA,CAAiBL,MAAA,CAAOK,CAAP,CADsB,CAAzC,CAFoC,CAOtC,OAAOR,QAlCmB,CARxB,CAFmG;",
"sources":["node_modules/blockly/core-browser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$blockly$core_browser\"] = function(global,require,module,exports) {\n/* eslint-disable */\n;(function(root, factory) {\n  if (typeof define === 'function' && define.amd) { // AMD\n    define(['./blockly'], factory);\n  } else if (typeof exports === 'object') { // Node.js\n    module.exports = factory(require('./blockly'));\n  } else { // Browser\n    root.Blockly = factory(root.Blockly);\n  }\n}(this, function(Blockly) {\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Blockly core module for the browser. It includes blockly.js\n *               and adds a helper method for setting the locale.\n */\n\n/* eslint-disable */\n'use strict';\n\n// Add a helper method to set the Blockly locale.\nBlockly.setLocale = function (locale) {\n  Blockly.Msg = Blockly.Msg || {};\n  Object.keys(locale).forEach(function (k) {\n    Blockly.Msg[k] = locale[k];\n  });\n};\n\nreturn Blockly;\n})); \n\n};"],
"names":["shadow$provide","global","require","module","exports","root","factory","define","amd","Blockly","setLocale","Blockly.setLocale","locale","Msg","Object","keys","forEach","k"]
}
