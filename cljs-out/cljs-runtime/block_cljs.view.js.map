{"version":3,"sources":["block_cljs/view.cljs"],"mappings":"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","names":["block-cljs.view/menu","block-cljs.view/tutorials","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","block-cljs.tutorials-a/vect","block-cljs.tutorials-b/vect","block-cljs.tutorials-c/vect","block-cljs.tutorials-d/vect","block-cljs.tutorials-e/vect","block-cljs.tutorials-f/vect","block-cljs.view/chapters","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","cljs.core/count","block-cljs.view/load-workspace","xml-text","js/module$node_modules$blockly$index.Xml","js/module$node_modules$blockly$index","js/block-cljs","js/block-cljs.view","js/block-cljs.view.state","block-cljs.view/state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","js/block-cljs.view.app-state","block-cljs.view/app-state","block-cljs.view/tutorial-fu","inc-or-dec","el","goog.dom/getElement","idx-old","G__6998","goog.string/toNumber","goog.dom.forms/getValue","idx-new","idx","tut","cljs.core.get.cljs$core$IFn$_invoke$arity$2","goog.dom.forms/setValue","cljs.core/reset!","js/block-cljs.view.workspace","block-cljs.view/workspace","js/initblocks","cljs.core/clj->js","fexpr__6999","cljs.core/identity","block-cljs.view/thexml","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","block-cljs.view/code->break-str","width","edn-code","temp__5733__auto__","code","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","p1__7000#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","zprint.core.zprint_str.cljs$core$IFn$_invoke$arity$variadic","block-cljs.view/part-str","s","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/apply","cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2","block-cljs.view/my-str","e","f","x","cljs.core/seq?","block-cljs.view/augment-code-fu","flat-code","fn-code","and__4174__auto__","cljs.core/seq","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/second","p1__7001#","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core/cons","cljs.core.update.cljs$core$IFn$_invoke$arity$3","c","block-cljs.view/augment-code","cljs.core/flatten","p1__7002#","clojure.walk/postwalk","cljs.core/map?","block-cljs.view/timer","block-cljs.view/counter","block-cljs.view/stop-timer","msg","cljs.core/deref","js/clearInterval","block-cljs.view/start-timer","fu","ms","max","js/setInterval","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","block-cljs.view/run-code","aug-edn-code","theout","str-width","bindings","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","erg","e7003","sci.core.eval_string.cljs$core$IFn$_invoke$arity$2","js/Error","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","cljs.core.print.cljs$core$IFn$_invoke$arity$variadic","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/assoc","block-cljs.view/startsci","xml-str","edn-xml","tubax.core.xml__GT_clj.cljs$core$IFn$_invoke$arity$1","e7004","block-cljs.xmlparse/parse","block-cljs.view/tutorials-comp","p1__7005#","p1__7006#","cljs.core/dec","block-cljs.view/filter-defns","ec","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic","p1__7007#","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","cljs.core/first","cljs.core/List","cljs.core/last","block-cljs.view/to-kw","sy","cljs.core/Symbol","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/list?","e7008","sci.core.eval_string.cljs$core$IFn$_invoke$arity$1","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","block-cljs.view/transform-vec","vect","p1__7009#","block-cljs.view/reagent-comp","last-vec","cljs.core/vector?","block-cljs.view/out-comp","reagent.core/create-class","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","temp__5735__auto__","so","js/document","block-cljs.view/theview","block-cljs.view/output","reagent.core.render.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns block-cljs.view\n  (:require\n   [goog.dom :as gdom]\n   [goog.string :as gstring]\n   [goog.dom.forms :as gforms]\n   [sci.core :as sci]\n   [\"blockly\" :as blockly]\n   [block-cljs.xmlparse :as edn->code]\n   [block-cljs.tutorials-a :as t-a]\n   [block-cljs.tutorials-b :as t-b]\n   [block-cljs.tutorials-c :as t-c]\n   [block-cljs.tutorials-d :as t-d]\n   [block-cljs.tutorials-e :as t-e]\n   [block-cljs.tutorials-f :as t-f]\n   [clojure.walk :as w]\n   [tubax.core :as sax]\n   [reagent.core :as r]\n   [zprint.core :as zp]))\n\n\n(def menu false)\n\n(def tutorials (vec (concat t-a/vect t-b/vect t-c/vect t-d/vect t-e/vect\n                            t-f/vect)))\n(def chapters (vec (concat\n                     (repeat (count t-a/vect) \"I\")\n                     (repeat (count t-b/vect) \"II\")\n                     (repeat (count t-c/vect) \"III\")\n                     (repeat (count t-d/vect) \"IV\")\n                     (repeat (count t-e/vect) \"V\")\n                     (repeat (count t-f/vect) \"VI\"))))\n\n(defn load-workspace [xml-text]\n  (.. blockly/Xml\n      (clearWorkspaceAndLoadFromXml (.. blockly/Xml (textToDom xml-text))\n                                    (.getMainWorkspace blockly))))\n\n(defonce state (r/atom nil))\n\n(defonce app-state (r/atom nil))\n\n(defn tutorial-fu [inc-or-dec]\n  (fn []\n    (let [el (gdom/getElement \"tutorial_no\")\n          idx-old  (gstring/toNumber (gforms/getValue el))\n          idx-new (inc-or-dec idx-old)\n          idx (cond\n                (< -1 idx-new (count tutorials)) idx-new\n                (< -1 idx-old (count tutorials)) idx-old\n                :else 0)\n          tut (get tutorials idx)]\n      (load-workspace tut)\n      (gforms/setValue el idx)\n      (reset! state\n              {:stdout nil :result nil :code nil :tutorial-no idx})\n      (reset! app-state 0))))\n\n(defonce workspace\n  (do\n    (js/initblocks blockly)\n    (.inject blockly\n             \"blocklyDiv\"\n             (when menu (clj->js {:toolbox (gdom/getElement \"toolbox\")\n                                  :media \"/blockly/media/\"})))))\n\n((tutorial-fu identity))\n\n(def thexml (atom \"\"))\n\n(defn code->break-str [width edn-code]\n  (if-let [code  (:dat edn-code)]\n    (apply str (interpose \"\\n\" (map #(zp/zprint-str % width) code)))\n    (zp/zprint-str edn-code width)))\n\n(defn part-str [width s]\n  (apply str\n         (interpose \"\\n\"\n                    (map (partial apply str)\n                         (partition-all width s)))))\n\n(defn my-str [e width]\n  (let [f (fn [x]\n            (if (nil? x) \"nil\" (str x)))]\n    (if (seq? e)\n      (part-str width (apply str (interpose \" \" (map f e))))\n      (part-str width (f e)))))\n\n(defn augment-code-fu [edn-code flat-code fn-code]\n  (if (and (seq (filter #{(second fn-code)} flat-code))\n           (:code edn-code))\n    (if (:dat (:code edn-code))\n      (update-in edn-code [:code :dat] #(cons fn-code %))\n      (update edn-code :code (fn [c] {:dat [fn-code c]})))\n    edn-code))\n\n(defn augment-code [edn-code]\n  (let [flat-code (flatten (w/postwalk #(if (map? %) (vec %) %) edn-code))]\n    (-> edn-code\n        (augment-code-fu flat-code\n                         '(defn vec-rest \"added by Blockly parser\" [x]\n                            (let [r (rest x)] (if (seq? r) (vec r) r))))\n        (augment-code-fu flat-code\n                         '(defn vec-cons \"added by Blockly parser\" [x coll]\n                            (let [c (cons x coll)] (if (seq? c) (vec c) c)))))))\n(def timer (atom nil))\n(def counter (atom 0))\n\n(defn stop-timer [msg]\n  (js/clearInterval @timer)\n  (reset! timer nil)\n  (reset! counter 0)\n  msg)\n\n\n(defn start-timer [fu ms max msg]\n  (when-not @timer\n    (reset! timer\n            (js/setInterval (fn []\n                              (swap! counter inc)\n                              (if (< @counter max)\n                                (fu)\n                                (stop-timer nil))) ms))\n    msg))\n\n(defn run-code [edn-code]\n  (let [aug-edn-code (augment-code edn-code)\n        theout (atom \"\")\n        str-width 41\n        bindings {'println (fn [& x]\n                             (swap! theout str (my-str x str-width) \"\\n\") nil)\n                  'print (fn [& x]\n                           (swap! theout str (my-str x str-width)) nil)\n                  'app-state app-state\n                  'start-timer start-timer\n                  'stop-timer stop-timer}\n        erg (try (sci/eval-string (code->break-str str-width\n                                                   (:code aug-edn-code))\n                                  {:bindings bindings})\n                 (catch js/Error e (.-message e)))]\n    (when menu\n      ;;(println \"edn: \" edn)\n      (println \"-------\")\n      (print (code->break-str str-width (:code aug-edn-code)))\n      (println (:error aug-edn-code))\n      (println \"-------\")\n      (when @theout (println @theout))\n      (println erg))\n    (swap! state assoc\n           :stdout @theout\n           :result (my-str erg str-width)\n           :code (if (:error aug-edn-code)\n                   \"Cannot even parse the blocks\"\n                   (code->break-str str-width (:code aug-edn-code)))\n           :edn-code (:code aug-edn-code))))\n\n(defn ^:export startsci []\n(let [xml-str (->> (.-mainWorkspace blockly)\n                   (.workspaceToDom blockly/Xml)\n                   (.domToPrettyText blockly/Xml))\n      edn-xml (sax/xml->clj xml-str)\n      edn-code (if (seq (:content edn-xml))\n                 (try {:code (edn->code/parse edn-xml)}\n                      (catch js/Error e {:error (.-message e)})) \"\")]\n  (reset! thexml xml-str)\n  (run-code edn-code)))\n\n(defn tutorials-comp []\n  (if (zero? (:tutorial-no @state))\n    [:div\n     [:button {:on-click (tutorial-fu inc)} \"Go to next example\"]\n     #_[:button\n        {:on-click (tutorial-fu (fn [_] (dec (count tutorials))))}\n        \"Go to rocket launch\"]]\n    [:div\n     [:button {:on-click (tutorial-fu #(- % 5))} \"<<\"]\n     [:button {:on-click (tutorial-fu #(+ % 5))} \">>\"]\n     \" \" (inc (:tutorial-no @state)) \"/\" (count tutorials) \" \"\n     \"(\" (get chapters (:tutorial-no @state)) \")\" \" \"\n     [:button {:on-click (tutorial-fu dec)} \"<\"]\n     [:button {:on-click (tutorial-fu inc)} \">\"]\n     ]))\n\n\n(defn filter-defns [edn-code fu]\n  (let [ec (if (:dat edn-code) edn-code {:dat [edn-code]})]\n    {:dat\n     (conj\n       (vec (filter #(= (symbol \"defn\") (first %)) (:dat ec)))\n       (list fu)\n       (last (:dat ec)))}))\n\n(defn to-kw [edn-code sy]\n  (cond\n    (symbol? sy)\n    (let [s (str sy)]\n      (cond\n        (= \":\" (first s)) (keyword (subs s 1 (count s)))\n        (= \"nil\" s) nil\n        (= \"@app-state\" s) @app-state\n        :else sy))\n    (map? sy)\n    (if (:on-click sy)\n      (assoc sy\n             :on-click\n             #(run-code\n                {:code\n                 (filter-defns edn-code (:on-click sy))}))\n      sy)\n    (list? sy)\n    (do\n      (println \"tl \" sy)\n      (println (augment-code edn-code))\n      (try (sci/eval-string (pr-str sy))\n           (catch js/Error e (.-message e))))\n    :else sy))\n\n(defn transform-vec [vect edn-code]\n  (w/postwalk #(to-kw edn-code %)\n              vect))\n\n(defn reagent-comp []\n  (let [last-vec\n        (cond\n          (vector? (:edn-code @state)) (:edn-code @state)\n          (and (map? (:edn-code @state))\n               (vector? (last (:dat (:edn-code @state)))))\n          (last (:dat (:edn-code @state)))\n          :else [nil])]\n    (when (= (symbol \":div\") (first last-vec))\n      [:div\n       (transform-vec last-vec (:edn-code @state))])))\n\n(defn out-comp []\n  (r/create-class\n    (merge\n      {:reagent-render\n       (fn []\n         [:div\n          (when menu\n            [:input {:type \"text\" :value (pr-str @thexml) :id \"xmltext\"\n                     :read-only true}])\n          [tutorials-comp]\n          [reagent-comp]\n          (when (:result @state)\n            [:table {:style {:width \"100%\"}}\n             [:thead\n              [:tr {:align :left}\n               [:th {:style {:width \"50%\"}} \"Output\"]\n               (when (< 1 (:tutorial-no @state)) [:th \"Code\"])]]\n             [:tbody\n              [:tr\n               [:td {:align :top}\n                (when-let [so (:stdout @state)]\n                  [:pre so])\n                [:pre (:result @state)]]\n               (when (< 1 (:tutorial-no @state))\n                 [:td {:align :top} [:pre (:code @state)]])]]])])}\n      (when menu\n        {:component-did-update (fn []\n                                 (.select (gdom/getElement \"xmltext\"))\n                                 (.execCommand js/document \"copy\"))})\n\n      )))\n\n(defn theview []\n  [:div\n   [out-comp]\n   ])\n\n(defn ^{:export true :dev/after-load true} output []\n  (r/render [theview] (gdom/getElement \"out\")))\n"]}