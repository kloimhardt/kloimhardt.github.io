{"version":3,"sources":["sci/impl/utils.cljc"],"mappings":"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","names":["cljs.core.derive.cljs$core$IFn$_invoke$arity$2","sci.impl.utils/constant?","x","cljs.core/Keyword","sci.impl.utils/mark-resolve-sym","sym","cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2","m","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","sci.impl.utils/eval?","G__26194","cljs.core/meta","sci.impl.utils/kw-identical?","cljs.core/keyword-identical?","var_args","G__26196","sci.impl.utils/gensym*","js/Error","cljs.core.gensym.cljs$core$IFn$_invoke$arity$0","prefix","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1","sci.impl.utils/mark-eval-call","expr","sci.impl.utils/mark-eval","G__26201","sci.impl.utils/throw-error-with-location","msg","iobj","sci.impl.utils.throw_error_with_location.cljs$core$IFn$_invoke$arity$3","data","map__26207","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","line","cljs.core.get.cljs$core$IFn$_invoke$arity$2","column","temp__5735__auto__","cljs.core/deref","v","sci.impl.vars/current-file","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","sci.impl.utils/rethrow-with-location-of-node","ctx","e","node","cljs.core/not","temp__5733__auto__","clojure.string/includes?","map__26209","cljs.core.get.cljs$core$IFn$_invoke$arity$3","and__4174__auto__","new-exception","d","cljs.core/ex-data","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","sci.impl.utils/vary-meta*","seq26211","G__26212","cljs.core/first","cljs.core/next","G__26213","self__4776__auto__","obj","f","args","sci.impl.vars/var?","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core/vary-meta","sci.impl.utils/merge-meta","sci.impl.vars/namespace?","cljs.core/with-meta","sci.impl.utils/strip-core-ns","G__26215","cljs.core/namespace","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","cljs.core/name","sci.impl.utils/allowed-loop","sci.impl.utils/allowed-recur","sci.impl.utils/walk*","inner","form","cljs.core/list?","cljs.core/list","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/map-entry?","cljs.core/MapEntry","G__26216","cljs.core/key","G__26217","cljs.core/val","cljs.core/seq?","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","cljs.core/record?","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","r","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/coll?","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/empty","sci.impl.utils/prewalk","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","sci.impl.utils/get-namespace","env","ns-sym","attr-map","or__4185__auto__","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","ns-obj","sci.impl.vars/->SciNamespace","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","sci.impl.utils/set-namespace!","sci.impl.types/setVal","sci.impl.vars/current-ns"],"sourcesContent":["(ns sci.impl.utils\n  {:no-doc true}\n  (:require [clojure.string :as str]\n            [sci.impl.vars :as vars]\n            [sci.impl.types :as t]))\n\n(derive :sci.error/realized-beyond-max :sci/error)\n\n(defn constant? [x]\n  (or (number? x) (string? x) (keyword? x)))\n\n(defn mark-resolve-sym\n  [sym]\n  (vary-meta\n   sym\n   (fn [m]\n     (assoc m :sci.impl/op :resolve-sym))))\n\n(defn eval? [x]\n  (some-> x meta :sci.impl/op))\n\n(def kw-identical? #?(:clj identical? :cljs keyword-identical?))\n\n(defn gensym*\n  ([] (mark-resolve-sym (gensym)))\n  ([prefix] (mark-resolve-sym (gensym prefix))))\n\n(defn mark-eval-call\n  [expr]\n  (vary-meta\n   expr\n   (fn [m]\n     (assoc m :sci.impl/op :call))))\n\n(defn mark-eval\n  [expr]\n  (vary-meta\n   expr\n   (fn [m]\n     (assoc m :sci.impl/op :eval))))\n\n(defn throw-error-with-location\n  ([msg iobj] (throw-error-with-location msg iobj {}))\n  ([msg iobj data]\n   (let [{:keys [:line :column]} (meta iobj)\n         msg (str msg\n                  \" [at \"\n                  (when-let [v @vars/current-file]\n                    (str v \", \"))\n                  \"line \"\n                  line \", column \" column\"]\") ]\n     (throw (ex-info msg (merge {:type :sci/error\n                                 :line line\n                                 :column column} data))))))\n\n(defn rethrow-with-location-of-node [ctx ^Throwable e node]\n  (if-not (:sci.impl/in-try ctx)\n    (if-let [m #?(:clj (.getMessage e)\n                  :cljs (.-message e))]\n      (if (str/includes? m \"[at\")\n        (throw e)\n        (let [{:keys [:line :column] :or {line (:line ctx)\n                                          column (:column ctx)}} (meta node)]\n          (if (and line column)\n            (let [m (str m\n                         \" [at \"\n                         (when-let [v @vars/current-file]\n                           (str v \", \"))\n                         \"line \"\n                         line \", column \" column\"]\")\n                  new-exception (let [d (ex-data e)]\n                                  (ex-info m (merge {:type :sci/error\n                                                     :line line\n                                                     :column column\n                                                     :message m} d) e))]\n              (throw new-exception))\n            (throw e))))\n      (throw e))\n    (throw e)))\n\n(defn vary-meta*\n  \"Only adds metadata to obj if d is not nil and if obj already has meta\"\n  [obj f & args]\n  (if (not (vars/var? obj)) ;; vars can have metadata but don't support with-meta\n    (if (meta obj)\n      (apply vary-meta obj f args)\n      obj)\n    obj))\n\n(defn merge-meta\n  \"Only adds metadata to obj if d is not nil and if meta on obj isn't already nil.\"\n  [obj d]\n  (if (and d (not (vars/var? obj))\n             (not (vars/namespace? obj))) ;; vars can have metadata but don't support with-meta\n    (if-let [m (meta obj)]\n      (with-meta obj (merge m d))\n      obj)\n    obj))\n\n(defn strip-core-ns [sym]\n  (case (namespace sym)\n    (\"clojure.core\" \"cljs.core\") (symbol (name sym))\n    sym))\n\n(def allowed-loop (with-meta (symbol \"loop\") {:line :allow}))\n(def allowed-recur (with-meta (symbol \"recur\") {:line :allow}))\n\n(defn walk*\n  [inner form]\n  (cond\n    (:sci.impl/op (meta form)) form\n    (list? form) (with-meta (apply list (map inner form))\n                   (meta form))\n    #?(:clj (instance? clojure.lang.IMapEntry form) :cljs (map-entry? form))\n    #?(:clj (clojure.lang.MapEntry/create (inner (key form)) (inner (val form)))\n       :cljs (MapEntry. (inner (key form)) (inner (val form)) nil))\n    (seq? form) (with-meta (doall (map inner form))\n                  (meta form))\n    #?(:clj (instance? clojure.lang.IRecord form)\n       :cljs (record? form))\n    (reduce (fn [r x] (conj r (inner x))) form form)\n    (coll? form) (into (empty form) (map inner form))\n    :else form))\n\n(defn prewalk\n  \"Prewalk with metadata preservation. Does not prewalk :sci.impl/op nodes.\"\n  [f form]\n  (walk* (partial prewalk f) (f form)))\n\n(defn get-namespace\n  \"Fetches namespaces from env if it exists. Else produces one and adds it to env before returning it.\"\n  [env ns-sym attr-map]\n  ;; (prn \"env\" (some? env))\n  (or (let [v (get-in @env [:namespaces ns-sym :obj])]\n        ;; (prn \"v\" v)\n        v)\n      (let [ns-obj (vars/->SciNamespace ns-sym attr-map)]\n        (swap! env assoc-in [:namespaces ns-sym :obj] ns-obj)\n        ns-obj)))\n\n(defn set-namespace! [ctx ns-sym attr-map]\n  (let [env (:env ctx)\n        attr-map (merge (meta ns-sym) attr-map)\n        ns-obj (get-namespace env ns-sym attr-map)]\n    (t/setVal vars/current-ns ns-obj)))\n"]}