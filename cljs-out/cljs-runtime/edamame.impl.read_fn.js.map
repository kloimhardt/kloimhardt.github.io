{"version":3,"sources":["edamame/impl/read_fn.cljc"],"mappings":";;;AAIA,AAAA,AAAMA,AAASC;AAAf,AACE,AAAMS,AAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC;AACPV,AAAK,AAACW,AAAS,AAAKC;AAAL,AACE,AAAI,AAAAC,AAASD;AACX,AAAAE,AAAe,AAAA,AAACK,AAAqB,AAACC,AAAKR;AAA3C,AAAA,AAAAE;AAAA,AAAAC,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAUE;AAAV,AAAAD,AAAAD,AAAA,AAAA,AAAYG;AAAZ,AACE,AAAM,AAACG,AAAOH;AACR,AAAI,AAAA,AAAA,AAAA,AAAA,AAAQT,AAAAA,AAAMa,AAAkBC;;AAApC,AAAA;;AADN,AAGM,AAAA,AAACC,AAAMN;AACP,AAAI,AAAA,AAAA,AAAA,AAAA,AAAQT,AAAAA,AAAMgB;;AACdb;;AALV,AAMY,AAAI,AAAMc,AACW,AAACC,AAAYT;AAD9B,AAEE,AAAA,AAAA,AAAA,AAAQT,AAAAA,AAAMa,AAAkBC,AAAIG;;AACtCd;;;;;AAChBA;;;AACFA;;AACJZ;AAhBrBC,AAAA,AAAAC,AAiBuCO;AAjBvCR,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAE,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAAG,AAAAC,AAAAJ,AAAAA;AAAAK,AAAA,AAAAC,AAAAN,AAAA;AAAAO,AAAA,AAAAD,AAAAN,AAAA;AAkBM2B,AAAY,AAAA,AAAAC,AAACC;AAAD,AAAM,AAACC,AAAO,AAAA,AAAAF;AAAa,AAAA,AAACG,AAAQ,AAAA,AAAK1B;AAlB3D,AAAA,AAmBM2B;AACAC,AAAS,AAACC,AAAI,AAACC,AAAOR,AAAY,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMpB,AACAyB;AACxCI,AAAK,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAWJ,AAASlC;AAtB/B,AAuBEqC","names":["edamame.impl.read-fn/read-fn","expr","map__26713","cljs.core/deref","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","max-fixed","cljs.core.get.cljs$core$IFn$_invoke$arity$2","var-args?","state","cljs.core/volatile!","clojure.walk/postwalk","elt","cljs.core/Symbol","temp__5733__auto__","vec__26720","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","m","cljs.core/re-matches","cljs.core/name","cljs.core/empty?","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/max","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","n","js/parseInt","fixed-names","p1__26711#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","cljs.core.range.cljs$core$IFn$_invoke$arity$2","var-args-sym","arg-list","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","form","cljs.core/List"],"sourcesContent":["(ns edamame.impl.read-fn\n  {:no-doc true}\n  (:require [clojure.walk :refer [postwalk]]))\n\n(defn read-fn [expr]\n  (let [state (volatile! {:max-fixed 0 :var-args? false})\n        expr (postwalk (fn [elt]\n                         (if (symbol? elt)\n                           (if-let [[_ m] (re-matches #\"^%(.*)\" (name elt))]\n                             (cond (empty? m)\n                                   (do (vswap! state update :max-fixed max 1)\n                                       '%1)\n                                   (= \"&\" m)\n                                   (do (vswap! state assoc :var-args? true)\n                                       elt)\n                                   :else (do (let [n #?(:clj (Integer/parseInt m)\n                                                        :cljs (js/parseInt m))]\n                                               (vswap! state update :max-fixed max n))\n                                             elt))\n                             elt)\n                           elt))\n                       expr)\n        {:keys [:max-fixed :var-args?]} @state\n        fixed-names (map #(symbol (str \"%\" %)) (range 1 (inc max-fixed)))\n        var-args-sym '%&\n        arg-list (vec (concat fixed-names (when var-args?\n                                            ['& var-args-sym])))\n        form (list 'fn* arg-list expr)]\n    form))\n"]}