{"version":3,"sources":["sci/impl/io.cljc"],"mappings":"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","names":["sci.impl.io/init-in","sci.impl.io/init-out","goog.string/StringBuffer","sci.impl.io/init-err","sci.impl.io/in","*unrestricted*-orig-val__26418","*unrestricted*-temp-val__26419","sci.impl.unrestrict/*unrestricted*","G__26428","sci.impl.vars.dynamic_var.cljs$core$IFn$_invoke$arity$1","sci.impl.vars/unbind","sci.impl.io/out","*unrestricted*-orig-val__26429","*unrestricted*-temp-val__26430","G__26431","sci.impl.io/err","*unrestricted*-orig-val__26432","*unrestricted*-temp-val__26433","G__26435","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","sci.impl.io/pr","seq26438","self__4777__auto__","cljs.core/seq","objs","cljs.core/deref","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/pr-str","sci.impl.io/flush","sci.impl.io/newline","sci.impl.io/println","sci.impl.io/prn","seq26454","cljs.core/prn-str","sci.impl.io/print","seq26466","cljs.core/print-str","seq26472","cljs.core/println-str","sci.impl.io/with-out-str","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/List","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","seq26485","G__26486","cljs.core/first","cljs.core/next","G__26487","self__4776__auto__","_","body"],"sourcesContent":["(ns sci.impl.io\n  {:no-doc true}\n  (:refer-clojure :exclude [pr prn print println newline flush with-out-str\n                            with-in-str read-line printf\n                            #?@(:cljs [string-print])])\n  (:require #?(:clj [sci.impl.io :as sio])\n            #?(:cljs [goog.string])\n            [sci.impl.unrestrict :refer [*unrestricted*]]\n            [sci.impl.vars :as vars]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(def init-in (fn []\n               #?(:clj (-> (java.io.StringReader. \"\")\n                           clojure.lang.LineNumberingPushbackReader.))))\n\n(def init-out (fn [] (new #?(:clj java.io.StringWriter\n                             :cljs goog.string/StringBuffer))))\n\n(def init-err (fn [] #?(:clj (java.io.StringWriter.))))\n\n(def in (binding [*unrestricted* true]\n          (doto (vars/dynamic-var '*in*)\n                                        (vars/unbind))))\n\n(def out (binding [*unrestricted* true]\n           (doto (vars/dynamic-var '*out*)\n             (vars/unbind))))\n\n(def err (binding [*unrestricted* true]\n           (doto (vars/dynamic-var '*err*)\n             (vars/unbind))))\n\n#?(:clj (defn pr-on\n          {:private true\n           :static true}\n          [x w]\n          (if *print-dup*\n            (print-dup x w)\n            (print-method x w))\n          nil))\n\n#?(:clj (defn pr\n          ([] nil)\n          ([x]\n           (pr-on x @out))\n          ([x & more]\n           (pr x)\n           (. ^java.io.Writer @out (append \\space))\n           (if-let [nmore (next more)]\n             (recur (first more) nmore)\n             (apply pr more))))\n   :cljs (defn pr\n           [& objs]\n           (.append @out (apply pr-str objs))))\n\n#?(:clj\n   (defn flush\n     []\n     (. ^java.io.Writer @out (flush))\n     nil)\n   :cljs (defn flush [] ;stub\n           nil))\n\n#?(:cljs (declare println))\n\n#?(:clj (defn newline\n          []\n          (. ^java.io.Writer @out (append ^String @#'clojure.core/system-newline))\n          nil)\n   :cljs (defn newline\n           []\n           (println)))\n\n#?(:clj\n   (defn prn\n     [& more]\n     (apply pr more)\n     (newline)\n     (when *flush-on-newline*\n       (flush)))\n   :cljs\n   (defn prn\n     [& objs]\n     (.append @out (apply prn-str objs))))\n\n#?(:clj\n   (defn print\n     [& more]\n     (binding [*print-readably* nil]\n       (apply pr more)))\n   :cljs\n   (defn print\n     [& objs]\n     (.append @out (apply print-str objs))))\n\n#?(:clj\n   (defn println\n     [& more]\n     (binding [*print-readably* nil]\n       (apply prn more)))\n   :cljs\n   (defn println\n     [& objs]\n     (.append @out (apply println-str objs))))\n\n#?(:clj\n   (defn printf\n     [fmt & args]\n     (print (apply format fmt args))))\n\n(defn with-out-str\n  [_ _ & body]\n  `(let [s# (new #?(:clj java.io.StringWriter\n                    :cljs goog.string.StringBuffer))]\n     (binding [*out* s#]\n       ~@body\n       (str s#))))\n\n#?(:clj\n   (defn with-in-str\n     [_ _ s & body]\n     `(with-open [s# (-> (java.io.StringReader. ~s) clojure.lang.LineNumberingPushbackReader.)]\n        (binding [*in* s#]\n          ~@body))))\n\n#?(:clj\n   (defn read-line\n     []\n     (if (instance? clojure.lang.LineNumberingPushbackReader @in)\n       (.readLine ^clojure.lang.LineNumberingPushbackReader @in)\n       (.readLine ^java.io.BufferedReader @in))))\n"]}