{"version":3,"sources":["sci/impl/interop.cljc"],"mappings":";;;AAUA,AAAA,AAAMA,AACQC,AAAIC,AAAcC,AAAYC;AAD5C,AAGa,AAAI,AAAA,AAAe,AAAA,AAASD;AAC1B,AAAMF,AAAI,AAAA,AAACI,AAAKF;;AAChB,AAAAG,AAAgB,AAAML,AAAIE;AAA1B,AAAA,AAAAG;AAAA,AAAAA,AAASC;AAAT,AACE,AAACC,AAAMD,AAAON,AAAIG;;AAClB,AAAO,AAAAK,AAAW,AAAA,AAA+BN;;;;AAUlE,AAAA,AAAAO,AAAMG,AACmDT;AADzD,AAAA,AAAAO,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AACsCG;AADtC,AAAAF,AAAAD,AAAA,AAAA,AAC4CR;AAD5C,AAIW,AAAAG,AAAgB,AAACS,AAASD,AAAMX;AAAhC,AAAA,AAAAG;AAAA,AAAAA,AAASC;AAAT,AACE,AAACS,AAAMT,AAAOH;;AACd,AAAO,AAAAK,AAAA,AAAmCN;;;AAEvD,AAAA,AAAMc,AAC2BC;AADjC,AAGW,AAAO,AAAAT,AAAA;;AAElB,AAAA,AAAMU,AAC6BC,AAAYhB;AAD/C,AAGW,AAACY,AAAMI,AAAYhB;;AAE9B,AAAA,AAAAiB,AAAMO,AAAiDC;AAAvD,AAAA,AAAAP,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAN,AAAAQ,AAAAF,AAAAA;AAAAG,AAAA,AAAAC,AAAAJ,AAAA;AAAAK,AAAA,AAAAD,AAAAJ,AAAA;AAAA,AACE,AAAAQ,AACa,AAAAxB,AAAa,AAAC0B,AAAUH;AAAxB,AAAA,AAAAvB;AAAA,AAAAA,AAASyB;AAAT,AACE,AAAM,AAAA,AAAiBA;AAAvB,AACE,AAAM,AAACE,AAAUN,AAAY,AAACO,AAAO,AAACC,AAAKN;AAA3C,AACEA;;AADF;;;AADF;;;AAGA,AAAM,AAACI,AAAUN,AAAYE;AAA7B,AACEA;;AADF;;;;AALf,AAAA,AAAAC;AAAAA;;AAOI,AAACJ,AAAI,AAAA,AAAA,AAAAU,AAAWX,AAAKI;;;AAE3B,AAAA,AAAAQ,AAAME,AAAgDV;AAAtD,AAAA,AAAAS,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAf,AAAA,AAAAe,AAAA,AAAA,AAAA,AAAA,AAAAtB,AAAAQ,AAAAc,AAAAA;AAAAb,AAAA,AAAAC,AAAAY,AAAA;AAAAX,AAAA,AAAAD,AAAAY,AAAA;AAAA,AACE,AAAME,AAAW,AAAAV,AACQ,AAAAxB,AAAa,AAAC0B,AAAUH;AAAxB,AAAA,AAAAvB;AAAA,AAAAA,AAASyB;AAAT,AACE,AAAM,AAAA,AAAiBA;AAAvB,AACE,AAACL,AAAIC,AAAY,AAACO,AAAO,AAACC,AAAKN;;AADjC;;;AAEA,AAACH,AAAIC,AAAYE;;;AAJ3B,AAAA,AAAAC;AAAAA;;AAKD,AAAAW,AAAa,AAACf,AAAI,AAAA,AAAA,AAAAU,AAAWX,AAAKI;AAAlC,AAAA,AAAAY;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAAChB,AAAIC,AAAYe;;AADnB;;;;AALhB,AAOEF;;AAEJ,AAAA,AAAMG,AAAeC,AAAIf;AAAzB,AACE,AAAA,AAAQ,AAACU,AAAmBK,AAAIf","names":["sci.impl.interop/invoke-instance-method","obj","_target-class","method-name","args","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","temp__5733__auto__","method","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","js/Error","p__26266","vec__26267","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","sci.impl.interop/invoke-static-method","class","goog.object/get","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","sci.impl.interop/get-static-field","_","sci.impl.interop/invoke-constructor","constructor","p__26270","map__26271","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","env","cljs.core.get.cljs$core$IFn$_invoke$arity$2","class->opts","sci.impl.interop/fully-qualify-class","sym","or__4185__auto__","ns*","cljs.core/namespace","cljs.core/contains?","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","cljs.core/name","cljs.core/deref","p__26273","map__26274","sci.impl.interop/resolve-class-opts","class-opts","temp__5735__auto__","v","sci.impl.interop/resolve-class","ctx"],"sourcesContent":["(ns sci.impl.interop\n  {:no-doc true}\n  #?(:clj (:import [sci.impl Reflector]))\n  #?(:cljs (:require [goog.object :as gobj])))\n\n;; see https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Reflector.java\n;; see invokeStaticMethod, getStaticField, etc.\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn invoke-instance-method\n  #?@(:cljs [[obj _target-class method-name args]\n             ;; gobj/get didn't work here\n             (if (identical? \\- (.charAt method-name 0))\n               (aget obj (subs method-name 1))\n               (if-let [method (aget obj method-name)]\n                 (apply method obj args)\n                 (throw (js/Error. (str \"Could not find method: \" method-name)))))]\n      :clj\n      [#_([obj method args]\n        (invoke-instance-method obj nil method args))\n       ([obj target-class method args]\n        (if-not target-class\n          (Reflector/invokeInstanceMethod obj method (object-array args))\n          (let [methods (Reflector/getMethods target-class (count args) method false)]\n            (Reflector/invokeMatchingMethod method methods obj (object-array args)))))]))\n\n(defn invoke-static-method #?(:clj [[^Class class method-name] args]\n                              :cljs [[class method-name] args])\n  #?(:clj\n     (Reflector/invokeStaticMethod class (str method-name) (object-array args))\n     :cljs (if-let [method (gobj/get class method-name)]\n             (apply method args)\n             (throw (js/Error. \"Could not find method\" method-name)))))\n\n(defn get-static-field #?(:clj [[^Class class field-name-sym]]\n                          :cljs [_])\n  #?(:clj (Reflector/getStaticField class (str field-name-sym))\n     :cljs (throw (js/Error. \"Not implemented yet.\"))))\n\n(defn invoke-constructor #?(:clj [^Class class args]\n                            :cljs [constructor args])\n  #?(:clj (Reflector/invokeConstructor class (object-array args))\n     :cljs (apply constructor args)))\n\n(defn fully-qualify-class [{:keys [:env :class->opts]} sym]\n  (or #?(:clj (when (contains? class->opts sym) sym)\n         :cljs (if-let [ns* (namespace sym)]\n                 (when (identical? \"js\" ns*)\n                   (when (contains? class->opts (symbol (name sym)))\n                     sym))\n                 (when (contains? class->opts sym)\n                   sym)))\n      (get (:imports @env) sym)))\n\n(defn resolve-class-opts [{:keys [:env :class->opts]} sym]\n  (let [class-opts (or #?(:clj (get class->opts sym)\n                     :cljs (if-let [ns* (namespace sym)]\n                             (when (identical? \"js\" ns*)\n                               (get class->opts (symbol (name sym))))\n                             (get class->opts sym)))\n                  (when-let [v (get (:imports @env) sym)]\n                    (get class->opts v)))]\n    class-opts))\n\n(defn resolve-class [ctx sym]\n  (:class (resolve-class-opts ctx sym)))\n"]}